#!/usr/bin/env python3

# generated by deepseek.com
# prompt:
"""
show me a python script
that takes an m4a file
(with aac audio)
and detects
the audio encoder's
lowpass filter
"cutoff frequency" in khz,
for example 20 khz
for high-quality audio,
or 10 khz for low-quality audio
"""

import numpy as np
from scipy.io import wavfile
from scipy import signal
import subprocess
import os
import tempfile

def detect_lowpass_cutoff(m4a_file_path):
    # Convert M4A to temporary WAV file using ffmpeg
    with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
        temp_wav_path = temp_wav.name
    
    try:
        # Convert using ffmpeg (must be installed and in PATH)
        # todo avoid temporary file
        subprocess.run([
            'ffmpeg', '-y', '-i', m4a_file_path,
            '-ac', '1',  # convert to mono for simpler analysis
            '-ar', '44100',  # standard sample rate
            temp_wav_path
        ], check=True, capture_output=True)
        
        # Read the WAV file
        sample_rate, audio_data = wavfile.read(temp_wav_path)
        
        # Normalize audio data to [-1, 1] range
        audio_data = audio_data / np.max(np.abs(audio_data))
        
        # Compute FFT
        n = len(audio_data)
        fft_result = np.fft.rfft(audio_data)
        fft_magnitude = np.abs(fft_result)
        frequencies = np.fft.rfftfreq(n, d=1.0/sample_rate)
        
        # Convert to dB scale
        fft_db = 20 * np.log10(fft_magnitude + 1e-10)  # Add small value to avoid log(0)
        
        # Find the frequency where the response drops by -3dB from peak
        peak_db = np.max(fft_db)
        target_db = peak_db - 3  # -3dB point
        
        # Find the highest frequency where magnitude is above -3dB
        above_threshold = np.where(fft_db >= target_db)[0]
        if len(above_threshold) > 0:
            cutoff_idx = above_threshold[-1]
            cutoff_freq = frequencies[cutoff_idx]
        else:
            cutoff_freq = frequencies[-1]  # fallback to Nyquist if nothing found
        
        # Convert to kHz and round to nearest 0.5 kHz (common encoder steps)
        cutoff_khz = round(cutoff_freq / 500) * 0.5

        debug = False

        if debug:
          # Plot for visualization (optional)
          import matplotlib.pyplot as plt
          plt.figure(figsize=(10, 4))
          plt.semilogx(frequencies, fft_db)
          plt.axvline(x=cutoff_freq, color='r', linestyle='--', 
                     label=f'Estimated cutoff: {cutoff_khz:.1f} kHz')
          plt.xlabel('Frequency (Hz)')
          plt.ylabel('Magnitude (dB)')
          plt.title('Frequency Spectrum Analysis')
          plt.legend()
          plt.grid(True)
          plt.show()
        
        return cutoff_khz
    
    finally:
        # Clean up temporary file
        if os.path.exists(temp_wav_path):
            os.remove(temp_wav_path)

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) != 2:
        print("Usage: python detect_lowpass.py <input.m4a>")
        sys.exit(1)
    
    m4a_file = sys.argv[1]
    cutoff = detect_lowpass_cutoff(m4a_file)
    print(f"Estimated lowpass cutoff frequency: {cutoff:.1f} kHz")
