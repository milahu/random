#!/usr/bin/env python3

# get the maximum frequency
# of an audio spectrum
# as an indicator
# of the actual audio quality

# generated by deepseek.com

# prompt
"""
create a python script
to detect the maximum frequency 
in an m4a audio file.
that maximum frequency is produced
by the lowpass filter
of the aac audio encoder.
high-quality audio
has a maximum frequency
around 20 KHz (fullband),
low-quality audio
has a maximum frequency
around 3 KHz (narrowband).
use ffmpeg to decode the audio
to pcm
in chunks of 10 seconds.
for each chunk:
detect the local maximum,
print the local maximum
and the chunk time,
update the global maximum.
to detect the local maximum,
remove the noise floor
around -97dB,
then find the maximum frequency
in the spectrum.
accept some command line options:
--ss n:
pass as "-ss n" to ffmpeg.
--to n:
pass as "-to n" to ffmpeg.
both -ss and -to args
must come before the -i arg
for ffmpeg input seeking.
"""

import argparse
import numpy as np
import subprocess
import sys
from scipy.signal import welch

def analyze_audio_file(input_file, start_time=None, end_time=None):
    # FFmpeg command to decode audio to PCM (16-bit little-endian)
    ffmpeg_cmd = [
        'ffmpeg',
        '-hide_banner',
        '-loglevel', 'error',
    ]
    
    # Add seeking parameters if specified
    if start_time is not None:
        ffmpeg_cmd.extend(['-ss', str(start_time)])
    if end_time is not None:
        ffmpeg_cmd.extend(['-to', str(end_time)])
    
    ffmpeg_cmd.extend([
        '-i', input_file,
        '-ac', '1',  # convert to mono
        '-ar', '44100',  # resample to 44.1kHz
        '-f', 's16le',  # 16-bit little-endian PCM
        '-'
    ])
    
    # Open FFmpeg process
    ffmpeg_process = subprocess.Popen(ffmpeg_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    sample_rate = 44100
    chunk_size = 10 * sample_rate  # 10 seconds of audio
    bytes_per_sample = 2
    global_max_freq = 0
    current_time = start_time or 0
    
    try:
        while True:
            # Read audio data
            raw_data = ffmpeg_process.stdout.read(chunk_size * bytes_per_sample)
            if not raw_data:
                break
                
            # Convert to numpy array
            audio_data = np.frombuffer(raw_data, dtype=np.int16).astype(np.float32)
            
            if len(audio_data) == 0:
                break
                
            # Calculate power spectral density using Welch's method
            frequencies, psd = welch(audio_data, fs=sample_rate, nperseg=4096)
            
            # Convert PSD to dB
            psd_db = 10 * np.log10(psd + 1e-12)  # Add small value to avoid log(0)
            
            # Find frequencies above noise floor (-97dB)
            threshold = -97
            valid_indices = np.where(psd_db > threshold)[0]
            
            if len(valid_indices) == 0:
                local_max_freq = 0
            else:
                # Find the highest frequency above threshold
                local_max_freq = frequencies[valid_indices[-1]]
            
            # Update global maximum
            if local_max_freq > global_max_freq:
                global_max_freq = local_max_freq
                
            print(f"Chunk at {current_time:.1f}s: Local max frequency = {local_max_freq:.1f} Hz")
            current_time += 10
            
    except KeyboardInterrupt:
        print("\nAnalysis interrupted by user.")
    finally:
        ffmpeg_process.terminate()
        try:
            ffmpeg_process.wait(timeout=1)
        except subprocess.TimeoutExpired:
            ffmpeg_process.kill()
    
    print(f"\nGlobal maximum frequency detected: {global_max_freq:.1f} Hz")
    
    # Classify audio quality
    if global_max_freq > 18000:
        print("Quality: Fullband (high quality)")
    elif global_max_freq > 8000:
        print("Quality: Wideband (medium quality)")
    elif global_max_freq > 3000:
        print("Quality: Narrowband (low quality)")
    else:
        print("Quality: Very narrowband (very low quality)")

def main():
    parser = argparse.ArgumentParser(description='Detect maximum frequency in M4A audio file')
    parser.add_argument('input_file', help='Input M4A audio file')
    parser.add_argument('--ss', type=float, help='Start time in seconds')
    parser.add_argument('--to', type=float, help='End time in seconds')
    
    args = parser.parse_args()
    
    analyze_audio_file(args.input_file, args.ss, args.to)

if __name__ == '__main__':
    main()
