#!/usr/bin/env python3

# generated by deepseek.com
# prompts:
"""
show me a python script
that takes an m4a file
(with aac audio)
and detects
the audio encoder's
lowpass filter
"cutoff frequency" in khz,
for example 20 khz
for high-quality audio,
or 10 khz for low-quality audio
"""
"""
please make matplotlib
write the debug plot
to a png file at
f"{input_file_path}.debug-spectrum.png".
also please avoid
creating a temporary wav file,
and try to use ffmpeg
to write wav data to stdout,
and feed that wav data
to wavfile and numpy.
generally,
try to use a streaming algorithm
to reduce memory usage.
"""

import numpy as np
from scipy.io import wavfile
import subprocess
import sys
import matplotlib.pyplot as plt
from io import BytesIO

def read_ffmpeg_output(m4a_file_path):
    """Read audio data from ffmpeg stdout without temporary files"""
    ffmpeg_cmd = [
        'ffmpeg',
        '-i', m4a_file_path,
        '-ac', '1',          # mono
        '-ar', '44100',      # sample rate
        '-f', 'wav',         # output format
        '-'                  # output to stdout
    ]
    
    # Run ffmpeg and capture stdout
    proc = subprocess.Popen(ffmpeg_cmd, 
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
    
    # Read WAV data from stdout
    stdout_data, stderr_data = proc.communicate()
    
    if proc.returncode != 0:
        raise RuntimeError(f"FFmpeg failed: {stderr_data.decode('utf-8')}")
    
    # Use BytesIO to make the bytes file-like for wavfile.read
    wav_data = BytesIO(stdout_data)
    sample_rate, audio_data = wavfile.read(wav_data)
    
    return sample_rate, audio_data

def analyze_spectrum(audio_data, sample_rate, plot_path=None):
    """Analyze audio spectrum and optionally save plot"""
    # Normalize
    audio_data = audio_data / np.max(np.abs(audio_data))
    
    # Compute FFT in chunks to reduce memory (streaming approach)
    chunk_size = 44100 * 10  # 10 seconds at 44.1kHz
    n_chunks = len(audio_data) // chunk_size
    if n_chunks == 0:
        n_chunks = 1
        chunk_size = len(audio_data)
    
    fft_sum = None
    
    for i in range(n_chunks):
        start = i * chunk_size
        end = start + chunk_size
        chunk = audio_data[start:end]
        
        # Compute FFT for this chunk
        fft_result = np.fft.rfft(chunk)
        fft_mag = np.abs(fft_result)
        
        if fft_sum is None:
            fft_sum = fft_mag
        else:
            fft_sum += fft_mag
    
    # Average the FFT results
    fft_magnitude = fft_sum / n_chunks
    frequencies = np.fft.rfftfreq(chunk_size, d=1.0/sample_rate)
    
    # Convert to dB scale
    fft_db = 20 * np.log10(fft_magnitude + 1e-10)
    
    # Find cutoff frequency (-3dB point)
    peak_db = np.max(fft_db)
    target_db = peak_db - 3
    above_threshold = np.where(fft_db >= target_db)[0]
    
    if len(above_threshold) > 0:
        cutoff_freq = frequencies[above_threshold[-1]]
    else:
        cutoff_freq = frequencies[-1]
    
    cutoff_khz = round(cutoff_freq / 500) * 0.5
    
    # Save debug plot if requested
    if plot_path:
        plt.figure(figsize=(10, 4))
        plt.semilogx(frequencies, fft_db)
        plt.axvline(x=cutoff_freq, color='r', linestyle='--', 
                   label=f'Estimated cutoff: {cutoff_khz:.1f} kHz')
        plt.xlabel('Frequency (Hz)')
        plt.ylabel('Magnitude (dB)')
        plt.title('Frequency Spectrum Analysis')
        plt.legend()
        plt.grid(True)
        plt.savefig(plot_path)
        plt.close()
    
    return cutoff_khz

def detect_lowpass_cutoff(m4a_file_path):
    """Main detection function"""
    try:
        sample_rate, audio_data = read_ffmpeg_output(m4a_file_path)
        plot_path = f"{m4a_file_path}.debug-spectrum.png"
        cutoff = analyze_spectrum(audio_data, sample_rate, plot_path)
        return cutoff
    except Exception as e:
        print(f"Error processing file: {str(e)}", file=sys.stderr)
        raise

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python detect_lowpass.py <input.m4a>")
        sys.exit(1)
    
    m4a_file = sys.argv[1]
    cutoff = detect_lowpass_cutoff(m4a_file)
    print(f"Estimated lowpass cutoff frequency: {cutoff:.1f} kHz")
