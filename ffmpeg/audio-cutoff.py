#!/usr/bin/env python3

# get the maximum frequency
# of an audio spectrum
# as an indicator
# of the actual audio quality

# generated by deepseek.com

# prompt
"""
create a python script
to detect the maximum frequency 
in an m4a audio file.
that maximum frequency is produced
by the lowpass filter
of the aac audio encoder.
high-quality audio
has a maximum frequency
around 20 KHz (fullband),
low-quality audio
has a maximum frequency
around 3 KHz (narrowband).
use ffmpeg to decode the audio
to pcm
in chunks of 10 seconds.
for each chunk:
detect the local maximum,
print the local maximum
and the chunk time
with the format
f"t={t}sec f={f}KHz",
update the global maximum.
to detect the local maximum,
remove the noise floor
around -110dB,
then find the maximum frequency
in the spectrum.
accept some command line options:
--ss n:
pass as "-ss n" to ffmpeg.
--to n:
pass as "-to n" to ffmpeg.
both -ss and -to args
must come before the -i arg
for ffmpeg input seeking.
print all frequencies in KHz.
add a shebang line before the script,
spaced by an empty line.
"""

#!/usr/bin/env python3

import argparse
import numpy as np
import subprocess
import sys

def analyze_audio(input_file, start_time=None, end_time=None):
    # FFmpeg command to read audio and output as PCM samples
    cmd = [
        'ffmpeg',
        '-hide_banner',
        '-loglevel', 'error',
    ]
    
    if start_time is not None:
        cmd.extend(['-ss', str(start_time)])
    if end_time is not None:
        cmd.extend(['-to', str(end_time)])
    
    cmd.extend([
        '-i', input_file,
        '-ac', '1',               # Convert to mono
        '-ar', '44100',           # Resample to 44.1kHz (standard for audio analysis)
        '-f', 'f32le',           # Output as 32-bit float little-endian
        '-acodec', 'pcm_f32le',
        '-'
    ])
    
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    chunk_size = 10 * 44100       # 10 seconds of audio at 44.1kHz
    bytes_per_sample = 4          # 32-bit float = 4 bytes
    global_max_freq = 0
    current_time = start_time if start_time else 0
    
    while True:
        # Read audio data
        raw_data = process.stdout.read(chunk_size * bytes_per_sample)
        if not raw_data:
            break
        
        # Convert to numpy array
        samples = np.frombuffer(raw_data, dtype=np.float32)
        
        if len(samples) == 0:
            current_time += 10
            continue
        
        # Compute FFT
        fft_result = np.fft.rfft(samples)
        fft_magnitude = np.abs(fft_result)
        
        # Convert to dB
        fft_db = 20 * np.log10(fft_magnitude + 1e-12)  # Add small value to avoid log(0)
        
        # Remove noise floor (-110dB)
        fft_db_clean = np.where(fft_db > -110, fft_db, -120)
        
        # Find the maximum frequency above -110dB
        max_bin = np.argmax(fft_db_clean)
        max_freq = max_bin * 44100 / len(samples)  # Convert bin to frequency
        
        # Convert to KHz
        max_freq_khz = max_freq / 1000
        
        # Update global maximum
        if max_freq_khz > global_max_freq:
            global_max_freq = max_freq_khz
        
        print(f"t={current_time}sec f={max_freq_khz:.2f}KHz")
        current_time += 10
    
    print(f"\nGlobal maximum frequency: {global_max_freq:.2f}KHz")
    
    # Check if this is fullband or narrowband
    if global_max_freq > 15:
        print("Quality: Fullband (high quality)")
    elif global_max_freq > 5:
        print("Quality: Wideband (medium quality)")
    else:
        print("Quality: Narrowband (low quality)")

def main():
    parser = argparse.ArgumentParser(description='Detect maximum frequency in an M4A audio file')
    parser.add_argument('input_file', help='Input M4A audio file')
    parser.add_argument('--ss', type=float, help='Start time in seconds')
    parser.add_argument('--to', type=float, help='End time in seconds')
    
    args = parser.parse_args()
    
    analyze_audio(args.input_file, args.ss, args.to)

if __name__ == '__main__':
    main()
